{"version":3,"sources":["logo.svg","components/ChangingCaption.js","components/Toggle.js","components/listOfProjects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ChangingCaption","props","captions","state","date","Date","this","timerID","setInterval","tick","clearInterval","setState","getUTCSeconds","React","Component","Toggle","isToggleOn","handleClick","bind","prevState","onClick","ListItem","value","NumberList","projects","map","number","key","toString","App","className","src","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,0ICsC1BC,E,kDAhCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAHRC,SAAW,CAAC,QAAS,YAAa,UAAW,aAI3C,EAAKC,MAAQ,CAACC,KAAM,IAAIC,MAFP,E,gEAKE,IAAD,OAChBC,KAAKC,QAAUC,aACb,kBAAM,EAAKC,SACX,O,6CAKFC,cAAcJ,KAAKC,W,6BAInBD,KAAKK,SAAS,CACZP,KAAM,IAAIC,S,+BAKd,OACE,6BACE,qCAAWC,KAAKJ,SAASI,KAAKH,MAAMC,KAAKQ,gBAAkB,S,GA7BvCC,IAAMC,W,OCwBrBC,E,kDAvBX,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IACDE,MAAQ,CAACa,YAAY,GAG1B,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALF,E,0DASjBZ,KAAKK,UAAS,SAAAQ,GAAS,MAAK,CAC1BH,YAAaG,EAAUH,iB,+BAKzB,OACE,4BAAQI,QAASd,KAAKW,aACnBX,KAAKH,MAAMa,WAAa,KAAO,W,GAlBrBH,IAAMC,WCA3B,SAASO,EAASpB,GACd,OAAO,4BAAKA,EAAMqB,OAePC,MAZf,SAAoBtB,GAChB,IAAMuB,EAAWvB,EAAMuB,SACvB,OACE,4BACGA,EAASC,KAAI,SAACC,GAAD,OACZ,kBAACL,EAAD,CAAUM,IAAKD,EAAOE,WACZN,MAAOI,SCHrBF,EAAW,CAAC,SAAU,SAAU,UAmCvBK,MAjCf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,2DAAgC,kBAAC,EAAD,QAElC,0BAAMA,UAAU,YACd,sCACA,kBAAC,EAAD,MAEA,yBAAKC,IAAI,4FAA4FD,UAAU,WAAWE,IAAI,SAC9H,0DAIA,kBAAC,EAAD,CAAYR,SAAUA,IAEtB,uBACEM,UAAU,WACVG,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBASF,4BAAQL,UAAU,cAChB,yCC1BYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.911cdb4f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nclass ChangingCaption extends React.Component {\r\n\r\n    captions = [\"tacos\", \"dumplings\", \"noodles\", \"Corbin :)\"]\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {date: new Date()};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n          () => this.tick(),\r\n          1000\r\n        );\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n    \r\n    tick() {\r\n        this.setState({\r\n          date: new Date()\r\n        });\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          <h3>Likes {this.captions[this.state.date.getUTCSeconds() % 4]}\r\n          </h3>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default ChangingCaption;","import React from 'react';\r\n\r\nclass Toggle extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {isToggleOn: true};\r\n  \r\n      // This binding is necessary to make `this` work in the callback\r\n      this.handleClick = this.handleClick.bind(this);\r\n    }\r\n  \r\n    handleClick() {\r\n      this.setState(prevState => ({\r\n        isToggleOn: !prevState.isToggleOn\r\n      }));\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <button onClick={this.handleClick}>\r\n          {this.state.isToggleOn ? 'ON' : 'OFF'}\r\n        </button>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Toggle;","import React from 'react';\r\n\r\nfunction ListItem(props) {\r\n    return <li>{props.value}</li>;\r\n  }\r\n  \r\nfunction NumberList(props) {\r\n    const projects = props.projects;\r\n    return (\r\n      <ul>\r\n        {projects.map((number) =>\r\n          <ListItem key={number.toString()}\r\n                    value={number} />\r\n        )}\r\n      </ul>\r\n    );\r\n}\r\n\r\nexport default NumberList;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport ChangingCaption from './components/ChangingCaption.js'\nimport Toggle from './components/Toggle.js'\n\nimport NumberList from './components/listOfProjects.js'\n\nconst projects = [\"thing1\", \"thing2\", \"thing3\"];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>header and useless button => <Toggle /></p>\n      </header>\n      <body className=\"App-body\">\n        <h1>Miasya</h1>\n        <ChangingCaption />\n        {/*  */}\n        <img src=\"http://images.clipartpanda.com/watermelon-clip-art-Gerald_G_Simple_Fruit_(FF_Menu)_16.png\" className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Here is some paragraph text\n        </p>\n\n        <NumberList projects={projects} />\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </body>\n      <footer className=\"App-footer\">\n        <h3>footer</h3>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}